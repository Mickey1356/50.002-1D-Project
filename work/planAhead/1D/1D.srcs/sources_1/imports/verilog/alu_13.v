/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_13 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn,
    input fail,
    output reg z,
    output reg v,
    output reg n,
    output reg [15:0] out
  );
  
  
  
  wire [1-1:0] M_adder16_z;
  wire [1-1:0] M_adder16_v;
  wire [1-1:0] M_adder16_n;
  wire [16-1:0] M_adder16_addOUT;
  reg [6-1:0] M_adder16_alufn;
  reg [16-1:0] M_adder16_a;
  reg [16-1:0] M_adder16_b;
  adder16_15 adder16 (
    .alufn(M_adder16_alufn),
    .a(M_adder16_a),
    .b(M_adder16_b),
    .z(M_adder16_z),
    .v(M_adder16_v),
    .n(M_adder16_n),
    .addOUT(M_adder16_addOUT)
  );
  
  wire [16-1:0] M_bool16_boolOUT;
  reg [6-1:0] M_bool16_alufn;
  reg [16-1:0] M_bool16_a;
  reg [16-1:0] M_bool16_b;
  bool16_16 bool16 (
    .alufn(M_bool16_alufn),
    .a(M_bool16_a),
    .b(M_bool16_b),
    .boolOUT(M_bool16_boolOUT)
  );
  
  wire [16-1:0] M_shift16_shiftOUT;
  reg [6-1:0] M_shift16_alufn;
  reg [16-1:0] M_shift16_a;
  reg [16-1:0] M_shift16_b;
  shift16_17 shift16 (
    .alufn(M_shift16_alufn),
    .a(M_shift16_a),
    .b(M_shift16_b),
    .shiftOUT(M_shift16_shiftOUT)
  );
  
  wire [16-1:0] M_cmp16_compOUT;
  reg [6-1:0] M_cmp16_alufn;
  reg [1-1:0] M_cmp16_z;
  reg [1-1:0] M_cmp16_v;
  reg [1-1:0] M_cmp16_n;
  cmp16_18 cmp16 (
    .alufn(M_cmp16_alufn),
    .z(M_cmp16_z),
    .v(M_cmp16_v),
    .n(M_cmp16_n),
    .compOUT(M_cmp16_compOUT)
  );
  
  wire [1-1:0] M_muldiv16_z;
  wire [1-1:0] M_muldiv16_v;
  wire [1-1:0] M_muldiv16_n;
  wire [16-1:0] M_muldiv16_muldivOUT;
  reg [6-1:0] M_muldiv16_alufn;
  reg [16-1:0] M_muldiv16_a;
  reg [16-1:0] M_muldiv16_b;
  muldiv16_19 muldiv16 (
    .alufn(M_muldiv16_alufn),
    .a(M_muldiv16_a),
    .b(M_muldiv16_b),
    .z(M_muldiv16_z),
    .v(M_muldiv16_v),
    .n(M_muldiv16_n),
    .muldivOUT(M_muldiv16_muldivOUT)
  );
  
  reg [15:0] outT;
  
  always @* begin
    M_adder16_alufn = alufn;
    M_adder16_a = a;
    M_adder16_b = b;
    z = M_adder16_z;
    v = M_adder16_v;
    n = M_adder16_n;
    M_bool16_alufn = alufn;
    M_bool16_a = a;
    M_bool16_b = b;
    M_shift16_alufn = alufn;
    M_shift16_a = a;
    M_shift16_b = b;
    M_cmp16_alufn = alufn;
    M_cmp16_z = M_adder16_z;
    M_cmp16_v = M_adder16_v;
    M_cmp16_n = M_adder16_n;
    M_muldiv16_alufn = alufn;
    M_muldiv16_a = a;
    M_muldiv16_b = b;
    
    case (alufn[4+1-:2])
      2'h0: begin
        if (alufn[1+1-:2] == 2'h0) begin
          outT = M_adder16_addOUT;
        end else begin
          outT = M_muldiv16_muldivOUT;
          z = M_muldiv16_z;
          v = M_muldiv16_v;
          n = M_muldiv16_n;
        end
      end
      2'h1: begin
        outT = M_bool16_boolOUT;
      end
      2'h2: begin
        outT = M_shift16_shiftOUT;
      end
      2'h3: begin
        outT = M_cmp16_compOUT;
      end
    endcase
    out = outT ^ fail;
  end
endmodule
