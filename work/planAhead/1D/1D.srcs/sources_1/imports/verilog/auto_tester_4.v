/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module auto_tester_4 (
    input clk,
    input rst,
    input next,
    output reg [7:0] seg,
    output reg [3:0] sel,
    output reg [15:0] leds
  );
  
  
  
  reg [4:0] M_ctr_d, M_ctr_q = 1'h0;
  wire [8-1:0] M_mss_seg;
  wire [4-1:0] M_mss_sel;
  reg [20-1:0] M_mss_values;
  multi_seven_seg_3 mss (
    .clk(clk),
    .rst(rst),
    .values(M_mss_values),
    .seg(M_mss_seg),
    .sel(M_mss_sel)
  );
  reg [4:0] M_adder_test_ctr_d, M_adder_test_ctr_q = 1'h0;
  reg [4:0] M_muldiv_test_ctr_d, M_muldiv_test_ctr_q = 1'h0;
  reg [3:0] M_bool_test_ctr_d, M_bool_test_ctr_q = 1'h0;
  reg [2:0] M_shift_test_ctr_d, M_shift_test_ctr_q = 1'h0;
  reg [2:0] M_cmp_test_ctr_d, M_cmp_test_ctr_q = 1'h0;
  localparam IDLE_tester = 4'd0;
  localparam ADD_tester = 4'd1;
  localparam MULDIV_tester = 4'd2;
  localparam BOOL_tester = 4'd3;
  localparam SHIFT_tester = 4'd4;
  localparam CMP_tester = 4'd5;
  localparam ADDF_tester = 4'd6;
  localparam MULDIVF_tester = 4'd7;
  localparam BOOLF_tester = 4'd8;
  localparam SHIFTF_tester = 4'd9;
  localparam CMPF_tester = 4'd10;
  localparam DONE_tester = 4'd11;
  
  reg [3:0] M_tester_d, M_tester_q = IDLE_tester;
  
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  wire [16-1:0] M_alu_out;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu_9 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n),
    .out(M_alu_out)
  );
  
  always @* begin
    M_tester_d = M_tester_q;
    M_shift_test_ctr_d = M_shift_test_ctr_q;
    M_bool_test_ctr_d = M_bool_test_ctr_q;
    M_adder_test_ctr_d = M_adder_test_ctr_q;
    M_muldiv_test_ctr_d = M_muldiv_test_ctr_q;
    M_ctr_d = M_ctr_q;
    M_cmp_test_ctr_d = M_cmp_test_ctr_q;
    
    M_ctr_d = M_ctr_q + 1'h1;
    leds = 1'h0;
    M_alu_alufn = 6'h00;
    M_alu_a = 1'h0;
    M_alu_b = 1'h0;
    M_mss_values = 20'h9a8a5;
    seg = ~M_mss_seg;
    sel = ~M_mss_sel;
    
    case (M_tester_q)
      IDLE_tester: begin
        M_mss_values = 20'hffe00;
        if (next) begin
          M_ctr_d = 1'h1;
          M_tester_d = ADD_tester;
        end
      end
      ADD_tester: begin
        
        case (M_adder_test_ctr_q)
          5'h00: begin
            M_alu_alufn = 6'h00;
            M_alu_a = 16'h0015;
            M_alu_b = 16'h0004;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0019 && M_alu_z == 1'h0 && M_alu_v == 1'h0 && M_alu_n == 1'h0) begin
                M_ctr_d = 1'h1;
                M_adder_test_ctr_d = M_adder_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = ADDF_tester;
              end
            end
          end
          5'h01: begin
            M_alu_alufn = 6'h00;
            M_alu_a = 16'h0000;
            M_alu_b = 16'h0000;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0000 && M_alu_z == 1'h1 && M_alu_v == 1'h0 && M_alu_n == 1'h0) begin
                M_ctr_d = 1'h1;
                M_adder_test_ctr_d = M_adder_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = ADDF_tester;
              end
            end
          end
          5'h02: begin
            M_alu_alufn = 6'h00;
            M_alu_a = 16'h4000;
            M_alu_b = 16'h4000;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h8000 && M_alu_z == 1'h0 && M_alu_v == 1'h1 && M_alu_n == 1'h1) begin
                M_ctr_d = 1'h1;
                M_adder_test_ctr_d = M_adder_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = ADDF_tester;
              end
            end
          end
          5'h03: begin
            M_alu_alufn = 6'h00;
            M_alu_a = 16'h0015;
            M_alu_b = 16'hffeb;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0000 && M_alu_z == 1'h1 && M_alu_v == 1'h0 && M_alu_n == 1'h0) begin
                M_ctr_d = 1'h1;
                M_adder_test_ctr_d = M_adder_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = ADDF_tester;
              end
            end
          end
          5'h04: begin
            M_alu_alufn = 6'h00;
            M_alu_a = 16'h0001;
            M_alu_b = 16'hfffc;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'hfffd && M_alu_z == 1'h0 && M_alu_v == 1'h0 && M_alu_n == 1'h1) begin
                M_ctr_d = 1'h1;
                M_adder_test_ctr_d = M_adder_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = ADDF_tester;
              end
            end
          end
          5'h05: begin
            M_alu_alufn = 6'h00;
            M_alu_a = 16'h0005;
            M_alu_b = 16'hfffc;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0001 && M_alu_z == 1'h0 && M_alu_v == 1'h0 && M_alu_n == 1'h0) begin
                M_ctr_d = 1'h1;
                M_adder_test_ctr_d = M_adder_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = ADDF_tester;
              end
            end
          end
          5'h06: begin
            M_alu_alufn = 6'h00;
            M_alu_a = 16'hffff;
            M_alu_b = 16'hffff;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'hfffe && M_alu_z == 1'h0 && M_alu_v == 1'h0 && M_alu_n == 1'h1) begin
                M_ctr_d = 1'h1;
                M_adder_test_ctr_d = M_adder_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = ADDF_tester;
              end
            end
          end
          5'h07: begin
            M_alu_alufn = 6'h00;
            M_alu_a = 16'h8000;
            M_alu_b = 16'h8000;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0000 && M_alu_z == 1'h1 && M_alu_v == 1'h1 && M_alu_n == 1'h0) begin
                M_ctr_d = 1'h1;
                M_adder_test_ctr_d = M_adder_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = ADDF_tester;
              end
            end
          end
          5'h08: begin
            M_alu_alufn = 6'h01;
            M_alu_a = 16'h0015;
            M_alu_b = 16'h0015;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0000 && M_alu_z == 1'h1 && M_alu_v == 1'h0 && M_alu_n == 1'h0) begin
                M_ctr_d = 1'h1;
                M_adder_test_ctr_d = M_adder_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = ADDF_tester;
              end
            end
          end
          5'h09: begin
            M_alu_alufn = 6'h01;
            M_alu_a = 16'h0015;
            M_alu_b = 16'h0004;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0011 && M_alu_z == 1'h0 && M_alu_v == 1'h0 && M_alu_n == 1'h0) begin
                M_ctr_d = 1'h1;
                M_adder_test_ctr_d = M_adder_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = ADDF_tester;
              end
            end
          end
          5'h0a: begin
            M_alu_alufn = 6'h01;
            M_alu_a = 16'hfffc;
            M_alu_b = 16'hfffc;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0000 && M_alu_z == 1'h1 && M_alu_v == 1'h0 && M_alu_n == 1'h0) begin
                M_ctr_d = 1'h1;
                M_adder_test_ctr_d = M_adder_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = ADDF_tester;
              end
            end
          end
          5'h0b: begin
            M_alu_alufn = 6'h01;
            M_alu_a = 16'hfffc;
            M_alu_b = 16'hfffb;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0001 && M_alu_z == 1'h0 && M_alu_v == 1'h0 && M_alu_n == 1'h0) begin
                M_ctr_d = 1'h1;
                M_adder_test_ctr_d = M_adder_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = ADDF_tester;
              end
            end
          end
          5'h0c: begin
            M_alu_alufn = 6'h01;
            M_alu_a = 16'h4000;
            M_alu_b = 16'h8000;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'hc000 && M_alu_z == 1'h0 && M_alu_v == 1'h1 && M_alu_n == 1'h1) begin
                M_ctr_d = 1'h1;
                M_adder_test_ctr_d = M_adder_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = ADDF_tester;
              end
            end
          end
          5'h0d: begin
            M_alu_alufn = 6'h01;
            M_alu_a = 16'h0001;
            M_alu_b = 16'hffeb;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0016 && M_alu_z == 1'h0 && M_alu_v == 1'h0 && M_alu_n == 1'h0) begin
                M_ctr_d = 1'h1;
                M_adder_test_ctr_d = M_adder_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = ADDF_tester;
              end
            end
          end
          5'h0e: begin
            M_alu_alufn = 6'h01;
            M_alu_a = 16'h8000;
            M_alu_b = 16'h4000;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h4000 && M_alu_z == 1'h0 && M_alu_v == 1'h1 && M_alu_n == 1'h0) begin
                M_ctr_d = 1'h1;
                M_adder_test_ctr_d = M_adder_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = ADDF_tester;
              end
            end
          end
          5'h0f: begin
            M_alu_alufn = 6'h01;
            M_alu_a = 16'hfffc;
            M_alu_b = 16'h0005;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'hfff7 && M_alu_z == 1'h0 && M_alu_v == 1'h0 && M_alu_n == 1'h1) begin
                M_ctr_d = 1'h1;
                M_adder_test_ctr_d = M_adder_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = ADDF_tester;
              end
            end
          end
          5'h10: begin
            M_alu_alufn = 6'h01;
            M_alu_a = 16'h0000;
            M_alu_b = 16'h0000;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0000 && M_alu_z == 1'h1 && M_alu_v == 1'h0 && M_alu_n == 1'h0) begin
                M_ctr_d = 1'h1;
                M_tester_d = MULDIV_tester;
              end else begin
                M_tester_d = ADDF_tester;
              end
            end
          end
        endcase
      end
      MULDIV_tester: begin
        
        case (M_muldiv_test_ctr_q)
          5'h00: begin
            M_alu_alufn = 6'h02;
            M_alu_a = 16'h0001;
            M_alu_b = 16'h0005;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0005 && M_alu_z == 1'h0 && M_alu_v == 1'h0 && M_alu_n == 1'h0) begin
                M_ctr_d = 1'h1;
                M_muldiv_test_ctr_d = M_muldiv_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = MULDIVF_tester;
              end
            end
          end
          5'h01: begin
            M_alu_alufn = 6'h02;
            M_alu_a = 16'h4000;
            M_alu_b = 16'h0004;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0000 && M_alu_z == 1'h1 && M_alu_v == 1'h1 && M_alu_n == 1'h0) begin
                M_ctr_d = 1'h1;
                M_muldiv_test_ctr_d = M_muldiv_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = MULDIVF_tester;
              end
            end
          end
          5'h02: begin
            M_alu_alufn = 6'h02;
            M_alu_a = 16'hffff;
            M_alu_b = 16'hffff;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0001 && M_alu_z == 1'h0 && M_alu_v == 1'h0 && M_alu_n == 1'h0) begin
                M_ctr_d = 1'h1;
                M_muldiv_test_ctr_d = M_muldiv_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = MULDIVF_tester;
              end
            end
          end
          5'h03: begin
            M_alu_alufn = 6'h02;
            M_alu_a = 16'hc000;
            M_alu_b = 16'hfffc;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0000 && M_alu_z == 1'h1 && M_alu_v == 1'h1 && M_alu_n == 1'h0) begin
                M_ctr_d = 1'h1;
                M_muldiv_test_ctr_d = M_muldiv_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = MULDIVF_tester;
              end
            end
          end
          5'h04: begin
            M_alu_alufn = 6'h02;
            M_alu_a = 16'hfffb;
            M_alu_b = 16'h0007;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'hffdd && M_alu_z == 1'h0 && M_alu_v == 1'h0 && M_alu_n == 1'h1) begin
                M_ctr_d = 1'h1;
                M_muldiv_test_ctr_d = M_muldiv_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = MULDIVF_tester;
              end
            end
          end
          5'h05: begin
            M_alu_alufn = 6'h02;
            M_alu_a = 16'hc000;
            M_alu_b = 16'h0004;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0000 && M_alu_z == 1'h1 && M_alu_v == 1'h1 && M_alu_n == 1'h1) begin
                M_ctr_d = 1'h1;
                M_muldiv_test_ctr_d = M_muldiv_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = MULDIVF_tester;
              end
            end
          end
          5'h06: begin
            M_alu_alufn = 6'h02;
            M_alu_a = 16'h4000;
            M_alu_b = 16'h0000;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0000 && M_alu_z == 1'h1 && M_alu_v == 1'h0 && M_alu_n == 1'h0) begin
                M_ctr_d = 1'h1;
                M_muldiv_test_ctr_d = M_muldiv_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = MULDIVF_tester;
              end
            end
          end
          5'h07: begin
            M_alu_alufn = 6'h04;
            M_alu_a = 16'h0004;
            M_alu_b = 16'h0002;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0002 && M_alu_z == 1'h0 && M_alu_v == 1'h0 && M_alu_n == 1'h0) begin
                M_ctr_d = 1'h1;
                M_muldiv_test_ctr_d = M_muldiv_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = MULDIVF_tester;
              end
            end
          end
          5'h08: begin
            M_alu_alufn = 6'h04;
            M_alu_a = 16'hfffc;
            M_alu_b = 16'hfffe;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0002 && M_alu_z == 1'h0 && M_alu_v == 1'h0 && M_alu_n == 1'h0) begin
                M_ctr_d = 1'h1;
                M_muldiv_test_ctr_d = M_muldiv_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = MULDIVF_tester;
              end
            end
          end
          5'h09: begin
            M_alu_alufn = 6'h04;
            M_alu_a = 16'h0004;
            M_alu_b = 16'hfffe;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'hfffe && M_alu_z == 1'h0 && M_alu_v == 1'h0 && M_alu_n == 1'h1) begin
                M_ctr_d = 1'h1;
                M_muldiv_test_ctr_d = M_muldiv_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = MULDIVF_tester;
              end
            end
          end
          5'h0a: begin
            M_alu_alufn = 6'h04;
            M_alu_a = 16'hfffc;
            M_alu_b = 16'h0002;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'hfffe && M_alu_z == 1'h0 && M_alu_v == 1'h0 && M_alu_n == 1'h1) begin
                M_ctr_d = 1'h1;
                M_muldiv_test_ctr_d = M_muldiv_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = MULDIVF_tester;
              end
            end
          end
          5'h0b: begin
            M_alu_alufn = 6'h04;
            M_alu_a = 16'h0000;
            M_alu_b = 16'h4000;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0000 && M_alu_z == 1'h1 && M_alu_v == 1'h0 && M_alu_n == 1'h0) begin
                M_ctr_d = 1'h1;
                M_muldiv_test_ctr_d = M_muldiv_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = MULDIVF_tester;
              end
            end
          end
          5'h0c: begin
            M_alu_alufn = 6'h04;
            M_alu_a = 16'h0004;
            M_alu_b = 16'h0000;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0000 && M_alu_z == 1'h0 && M_alu_v == 1'h0 && M_alu_n == 1'h0) begin
                M_ctr_d = 1'h1;
                M_muldiv_test_ctr_d = M_muldiv_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = MULDIVF_tester;
              end
            end
          end
          5'h0d: begin
            M_alu_alufn = 6'h06;
            M_alu_a = 16'h0005;
            M_alu_b = 16'h0004;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0001 && M_alu_z == 1'h0 && M_alu_v == 1'h0 && M_alu_n == 1'h0) begin
                M_ctr_d = 1'h1;
                M_muldiv_test_ctr_d = M_muldiv_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = MULDIVF_tester;
              end
            end
          end
          5'h0e: begin
            M_alu_alufn = 6'h06;
            M_alu_a = 16'h0000;
            M_alu_b = 16'h0005;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0000 && M_alu_z == 1'h1 && M_alu_v == 1'h0 && M_alu_n == 1'h0) begin
                M_ctr_d = 1'h1;
                M_muldiv_test_ctr_d = M_muldiv_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = MULDIVF_tester;
              end
            end
          end
          5'h0f: begin
            M_alu_alufn = 6'h06;
            M_alu_a = 16'h0004;
            M_alu_b = 16'h0000;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0000 && M_alu_z == 1'h0 && M_alu_v == 1'h0 && M_alu_n == 1'h0) begin
                M_ctr_d = 1'h1;
                M_tester_d = DONE_tester;
              end else begin
                M_tester_d = MULDIVF_tester;
              end
            end
          end
        endcase
      end
      BOOL_tester: begin
        
        case (M_bool_test_ctr_q)
          4'h0: begin
            M_alu_alufn = 6'h16;
            M_alu_a = 16'h5555;
            M_alu_b = 16'h7fff;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h2aaa) begin
                M_ctr_d = 1'h1;
                M_bool_test_ctr_d = M_bool_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = BOOLF_tester;
              end
            end
          end
          4'h1: begin
            M_alu_alufn = 6'h16;
            M_alu_a = 16'h5555;
            M_alu_b = 16'h0000;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h5555) begin
                M_ctr_d = 1'h1;
                M_bool_test_ctr_d = M_bool_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = BOOLF_tester;
              end
            end
          end
          4'h2: begin
            M_alu_alufn = 6'h18;
            M_alu_a = 16'h5555;
            M_alu_b = 16'h7fff;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h5555) begin
                M_ctr_d = 1'h1;
                M_bool_test_ctr_d = M_bool_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = BOOLF_tester;
              end
            end
          end
          4'h3: begin
            M_alu_alufn = 6'h18;
            M_alu_a = 16'h00f0;
            M_alu_b = 16'h7faf;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h00a0) begin
                M_ctr_d = 1'h1;
                M_bool_test_ctr_d = M_bool_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = BOOLF_tester;
              end
            end
          end
          4'h4: begin
            M_alu_alufn = 6'h1a;
            M_alu_a = 16'h5555;
            M_alu_b = 16'hffff;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h5555) begin
                M_ctr_d = 1'h1;
                M_bool_test_ctr_d = M_bool_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = BOOLF_tester;
              end
            end
          end
          4'h5: begin
            M_alu_alufn = 6'h1a;
            M_alu_a = 16'h5555;
            M_alu_b = 16'h0000;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h5555) begin
                M_ctr_d = 1'h1;
                M_bool_test_ctr_d = M_bool_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = BOOLF_tester;
              end
            end
          end
          4'h6: begin
            M_alu_alufn = 6'h1e;
            M_alu_a = 16'h00ff;
            M_alu_b = 16'h7f00;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h7fff) begin
                M_ctr_d = 1'h1;
                M_bool_test_ctr_d = M_bool_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = BOOLF_tester;
              end
            end
          end
          4'h7: begin
            M_alu_alufn = 6'h1e;
            M_alu_a = 16'h00f0;
            M_alu_b = 16'h00ff;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h00ff) begin
                M_ctr_d = 1'h1;
                M_tester_d = SHIFT_tester;
              end else begin
                M_tester_d = BOOLF_tester;
              end
            end
          end
        endcase
      end
      SHIFT_tester: begin
        
        case (M_shift_test_ctr_q)
          3'h0: begin
            M_alu_alufn = 6'h20;
            M_alu_a = 16'h5555;
            M_alu_b = 16'h0003;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'haaa8) begin
                M_ctr_d = 1'h1;
                M_shift_test_ctr_d = M_shift_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = SHIFTF_tester;
              end
            end
          end
          3'h1: begin
            M_alu_alufn = 6'h21;
            M_alu_a = 16'h5555;
            M_alu_b = 16'h0005;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h02aa) begin
                M_ctr_d = 1'h1;
                M_shift_test_ctr_d = M_shift_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = SHIFTF_tester;
              end
            end
          end
          3'h2: begin
            M_alu_alufn = 6'h23;
            M_alu_a = 16'haaaa;
            M_alu_b = 16'h0007;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'hff55) begin
                M_ctr_d = 1'h1;
                M_shift_test_ctr_d = M_shift_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = SHIFTF_tester;
              end
            end
          end
          3'h3: begin
            M_alu_alufn = 6'h23;
            M_alu_a = 16'h5555;
            M_alu_b = 16'h0009;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h002a) begin
                M_ctr_d = 1'h1;
                M_tester_d = CMP_tester;
              end else begin
                M_tester_d = SHIFTF_tester;
              end
            end
          end
        endcase
      end
      CMP_tester: begin
        
        case (M_cmp_test_ctr_q)
          3'h0: begin
            M_alu_alufn = 6'h33;
            M_alu_a = 16'h7f00;
            M_alu_b = 16'h7f00;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0001) begin
                M_ctr_d = 1'h1;
                M_cmp_test_ctr_d = M_cmp_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = CMPF_tester;
              end
            end
          end
          3'h1: begin
            M_alu_alufn = 6'h33;
            M_alu_a = 16'h5555;
            M_alu_b = 16'h7fff;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0000) begin
                M_ctr_d = 1'h1;
                M_cmp_test_ctr_d = M_cmp_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = CMPF_tester;
              end
            end
          end
          3'h2: begin
            M_alu_alufn = 6'h35;
            M_alu_a = 16'h7f00;
            M_alu_b = 16'h7fff;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0001) begin
                M_ctr_d = 1'h1;
                M_cmp_test_ctr_d = M_cmp_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = CMPF_tester;
              end
            end
          end
          3'h3: begin
            M_alu_alufn = 6'h35;
            M_alu_a = 16'h7faf;
            M_alu_b = 16'h7f00;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0000) begin
                M_ctr_d = 1'h1;
                M_cmp_test_ctr_d = M_cmp_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = CMPF_tester;
              end
            end
          end
          3'h4: begin
            M_alu_alufn = 6'h37;
            M_alu_a = 16'h7faf;
            M_alu_b = 16'h7fff;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0001) begin
                M_ctr_d = 1'h1;
                M_cmp_test_ctr_d = M_cmp_test_ctr_q + 1'h1;
              end else begin
                M_tester_d = CMPF_tester;
              end
            end
          end
          3'h5: begin
            M_alu_alufn = 6'h37;
            M_alu_a = 16'hc001;
            M_alu_b = 16'hc000;
            if (M_ctr_q == 1'h0) begin
              if (M_alu_out == 16'h0000) begin
                M_ctr_d = 1'h1;
                M_tester_d = DONE_tester;
              end else begin
                M_tester_d = CMPF_tester;
              end
            end
          end
        endcase
      end
      ADDF_tester: begin
        M_mss_values = {5'h0f, 5'h01, 5'h1f, M_adder_test_ctr_q};
      end
      MULDIVF_tester: begin
        M_mss_values = {5'h0f, 5'h02, 5'h1f, M_muldiv_test_ctr_q};
      end
      BOOLF_tester: begin
        M_mss_values = {5'h0f, 5'h03, 5'h1f, {1'h0, M_bool_test_ctr_q}};
      end
      SHIFTF_tester: begin
        M_mss_values = {5'h0f, 5'h04, 5'h1f, {2'h0, M_shift_test_ctr_q}};
      end
      CMPF_tester: begin
        M_mss_values = {5'h0f, 5'h05, 5'h1f, {2'h0, M_cmp_test_ctr_q}};
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_ctr_q <= 1'h0;
      M_adder_test_ctr_q <= 1'h0;
      M_muldiv_test_ctr_q <= 1'h0;
      M_bool_test_ctr_q <= 1'h0;
      M_shift_test_ctr_q <= 1'h0;
      M_cmp_test_ctr_q <= 1'h0;
      M_tester_q <= 1'h0;
    end else begin
      M_ctr_q <= M_ctr_d;
      M_adder_test_ctr_q <= M_adder_test_ctr_d;
      M_muldiv_test_ctr_q <= M_muldiv_test_ctr_d;
      M_bool_test_ctr_q <= M_bool_test_ctr_d;
      M_shift_test_ctr_q <= M_shift_test_ctr_d;
      M_cmp_test_ctr_q <= M_cmp_test_ctr_d;
      M_tester_q <= M_tester_d;
    end
  end
  
endmodule
