module game_loop (
    input clk,  // clock
    input rst,  // reset
    input up,
    input down,
    input left,
    input right,
        
    output tiles_g[28],
    output tiles_p[28],
    output win_led,
    output lose_led,
    output seven_seg[8]
  ) {
  
  seven_seg ss;
  
  .clk(clk) {
  
    button_conditioner up_cond;
    button_conditioner down_cond;
    button_conditioner left_cond;
    button_conditioner right_cond;
    
    .rst(rst) {
      state_counter sc; // add delay for inputs
            
      game_controller gc;
      
      fsm game_states = {START, EXPLORE1, EXPLORE1WIN, EXPLORE2, EXPLORE2WIN, EXPLORE3, EXPLORE3WIN, EXPLORE4, EXPLORE4WIN, WINGAME, FAIL};
    }
  }

  always {
  
    up_cond.in = up;
    down_cond.in = down;
    left_cond.in = left;
    right_cond.in = right;
    
    gc.up = up_cond.out;
    gc.down = down_cond.out;
    gc.left = left_cond.out;
    gc.right = right_cond.out;
    // gc.reset = reset;
    
    tiles_g = gc.tiles_g;
    tiles_p = gc.tiles_p;
    
    gc.level_state = 0;
    
    win_led = 0;
    lose_led = 0;
    
    ss.char = 31;
    seven_seg = ss.segs;
    
    case (game_states.q) {
      game_states.START:
        if (up_cond.out & sc.out) {
          gc.level_state = 0;
          game_states.d = game_states.EXPLORE1;
        }
      game_states.FAIL:
        lose_led = 1;
        if (up_cond.out & sc.out) {
          gc.level_state = 0;
          game_states.d = game_states.EXPLORE1;
        }

      game_states.EXPLORE1:
        ss.char = 1; // set 7-seg to display 1
        gc.level_state = 1;
        if(gc.win & sc.out) {
          game_states.d = game_states.EXPLORE1WIN;
        }
        if (gc.lose & sc.out) {
          game_states.d = game_states.FAIL;
        }
      game_states.EXPLORE1WIN:
        win_led = 1;
        gc.level_state = 7; // unused number
        if(up_cond.out & sc.out) {
          game_states.d = game_states.EXPLORE2;
        }
      game_states.EXPLORE2:
        ss.char = 2; // set 7-seg to display 2
        gc.level_state = 2;
        if(gc.win & sc.out) {
          game_states.d = game_states.EXPLORE2WIN;
        }
        if(gc.lose & sc.out) {
          game_states.d = game_states.FAIL;
        }
      game_states.EXPLORE2WIN:
        win_led = 1;
        gc.level_state = 7; // unused number
        if(up_cond.out & sc.out) {
          game_states.d = game_states.EXPLORE3;
        }
      game_states.EXPLORE3:
        ss.char = 3; // set 7-seg to display 3
        gc.level_state = 3;
        if(gc.win & sc.out) {
          game_states.d = game_states.EXPLORE3WIN;
        }
        if(gc.lose & sc.out) {
          game_states.d = game_states.FAIL;
        }
      game_states.EXPLORE3WIN:
        win_led = 1;
        gc.level_state = 7; // unused number
        if(up_cond.out & sc.out) {
          game_states.d = game_states.EXPLORE4;
        }
      game_states.EXPLORE4:
        ss.char = 4; // set 7-seg to display 4
        gc.level_state = 4;
        if(gc.win & sc.out) {
          game_states.d = game_states.WINGAME;
        }
        if(gc.lose & sc.out) {
          game_states.d = game_states.FAIL;
        }
      game_states.EXPLORE4WIN:
        gc.level_state = 7; // unused number
        if(up_cond.out & sc.out) {
          game_states.d = game_states.WINGAME;
        }
      game_states.WINGAME:
        win_led = 1;
        gc.level_state=7; // unused number
        if(up_cond.out & sc.out) {
            game_states.d = game_states.START;
        }
    }
  }
}
